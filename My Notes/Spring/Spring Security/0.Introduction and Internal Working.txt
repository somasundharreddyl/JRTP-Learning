1.Authentication: Proves who you are.
2.Authorization: what you are allowed to do after you have proven who you are.

3. Internal Flow of Spring Security?
   https://youtu.be/VwFwPNZF01I?si=Fs50RzjtAxg25Fxl

4.AuthenticationProvider:
  - DaoAuthenticationProvider
  -InMemoryAuthenticationProvider
  - LTAPAuthenticationProvider

5.FilterChain :
  - DefaultSecurityFilterChain
  - LogoutFilter
  - csrfFilter



1.Form-Based Authentication
2.Basic Authentication and writing our own Security Filter



               <dependency>
			<groupId>com.mysql</groupId>
			<artifactId>mysql-connector-j</artifactId>
			<scope>runtime</scope>
		</dependency>
                <dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>


@Configuration
@EnableWebSecurity
@EnableMethodSecurity
public class SecurityConfig {
	
	@Bean
	public UserDetailsService userDetails() {
		UserDetails user1=User.withUsername("user1").password("{noop}password123").roles("USER").build();
		UserDetails admin1=User.withUsername("admin1").password("{noop}password123").roles("ADMIN","USER").build();
		return new InMemoryUserDetailsManager(user1,admin1);
	}
	
	
	
	@Bean
	public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
		
		http.authorizeHttpRequests((request)->request.anyRequest().authenticated());
		http.httpBasic();
		return http.build();
		
	}
}




@RestController
@RequestMapping()
public class DemoController {

	@GetMapping("/user")
	@PreAuthorize("hasRole('USER')")
	public String userResult() {
		return "Hi, I am Chitti";
	}
	
	@GetMapping("/admin")
	@PreAuthorize("hasRole('ADMIN')")
	public String adminResult() {
		return "Hi, Who are You?";
	}
}
